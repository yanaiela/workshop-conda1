#!/usr/bin/env python3
import argparse
from aclpub2.generate import generate_proceedings, generate_handbook

if __name__ == "__main__":
    print("======================================================")
    print("         _    ____ _     ____  _   _ ____ ____   ")
    print("        / \  / ___| |   |  _ \| | | | __ )___ \  ")
    print("       / _ \| |   | |   | |_) | | | |  _ \ __) | ")
    print("      / ___ \ |___| |___|  __/| |_| | |_) / __/  ")
    print("     /_/   \_\____|_____|_|    \___/|____/_____| ")
    print()
    print("Generate proceedings for *CL Conferences and Workshops")
    print("======================================================")

    parser = argparse.ArgumentParser(
        description="Generate proceedings from an input direcotry."
    )
    parser.add_argument("path", type=str, help="Path to directory containing inputs.")
    parser.add_argument(
        "--proceedings", action="store_true", help="If set, generates the proceedings."
    )
    parser.add_argument(
        "--handbook", action="store_true", help="If set, generates the handbook."
    )
    parser.add_argument(
        "--overwrite",
        action="store_true",
        help="If set, overwrites the generated files in the output.",
    )
    parser.add_argument(
        "--nopax",
        action="store_true",
        help="If set, excludes PAX, which can be helpful when compiling large proceedings.",
    )
    parser.add_argument(
        "--frontmatter",
        action="store_true",
        help="If set, only generates the front matter.",
    )
    parser.add_argument(
        "--outdir",
        type=str,
        default="output",
        help="Directory to write final, ACL Anthology compatible generation outputs to.",
    )

    args = parser.parse_args()
    if args.proceedings == True:
        generate_proceedings(args.path, args.overwrite, args.outdir, args.nopax, args.frontmatter)
    if args.handbook == True:
        generate_handbook(args.path, args.overwrite)
